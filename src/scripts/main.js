// Innitial Load:
/*
    1. Ensuring Canvas Size:
        i. Declare the canvas constant.
        ii. Declare sizing variables.
        iii. Function that will assaign sizing.
            a. Will be called on initial load.
            b. Will be recalled when window is resized.
    2. gridSize Variable: Declares the gap sized of the grid.
    3. gridArray: A matrix.
        - Generated by the viewPort Size and the gidSize Variable.
        = Maybe Tweeked to be villed with ClassObjects.
    4. populateGrid():
        - generates the base grid, with all empty cell currently represented as small cicles.
        -

    -- Setting Up animation loop in advance, giving my self a space I can experiment with.
*/

import Cell from "./cells.js";
import InsertPreset,{beacon, beehive, blinker, block, boat, glider, hwship, loaf, lwship, mwship, penta, pulsar, toad, tub} from "./presets.js";

const canvas = document.getElementById("gameCanvas");
let ctx = canvas.getContext("2d");

let viewWidth = window.innerWidth * 0.9;
let viewHeight = window.innerHeight;
let gridSize = 64;
let gridArray = Array.from(
  Array(Math.floor(viewHeight / gridSize)),
  () => new Array(Math.floor(viewWidth / gridSize))
);

let active = [];
let running = false;
let speed = 0;

function matrixLoop(matrix, callback){
  for (let y = 0; y < matrix.length; y++){
    for (let x = 0; x < matrix[y].length; x++){
      callback(x,y)
    }
  }
}

function populateGrid(matrix) {
  matrixLoop(matrix, (x,y)=>{
    let newCell = new Cell(x, y);
    matrix[y][x] = newCell;
    matrix[y][x].renderCell(ctx, gridSize);
  })
}
function determinStatus(matrix) {
  matrixLoop(matrix,(x,y)=>{
    matrix[y][x].renderCell(ctx, gridSize);
    if (running === true) {
      matrix[y][x].findNeighbors(matrix);
    }
  })
}

function updateMatrix(matrix) {
  matrixLoop(matrix, (x,y) =>{
    matrix[y][x].renderCell(ctx, gridSize);
    if (running === true) {
      matrix[y][x].updateGeneration();
    }
  })
}

function setBoard() {
  viewWidth = window.innerWidth * 0.90;
  viewHeight = window.innerHeight;
  canvas.height = viewHeight;
  canvas.width = viewWidth;
  viewWidth = window.innerWidth;
  viewHeight = window.innerHeight;
  gridArray = Array.from(
    Array(Math.floor(viewHeight / gridSize)),
    () => new Array(Math.floor(viewWidth / gridSize))
  );
  populateGrid(gridArray);
  active = gridArray;
}

setBoard();
window.addEventListener("resize", setBoard);

function clickHandler(e) {
  let x = Math.round((e.layerX - gridSize / 2) / gridSize);
  let y = Math.round((e.layerY - gridSize / 2) / gridSize);
  if (active[y][x].live === false) {
    active[y][x].setLive();
  } else {
    active[y][x].setDead();
  }
}

canvas.addEventListener("click", (e) => clickHandler(e));
const startButton = document.getElementById("start");
const pauseButton = document.getElementById("pause");
const resetButton = document.getElementById("reset");

startButton.addEventListener("click", () => {
  running = true;
});
pauseButton.addEventListener("click", () => {
  running = false;
  speed = 0;
});
resetButton.addEventListener("click", ()=>{
  running = false;
  setBoard()
})

function runtimeHandler() {
  if (running === true) {
    speed = 5000;
  }
}

const dropDown = document.getElementById("presets");
const setButton = document.getElementById("set");

setButton.addEventListener("click", ()=>{
  setBoard()
  if(dropDown.value === "blinker"){
    InsertPreset(active, blinker)
  }
  if(dropDown.value === "block"){
    InsertPreset(active, block)
  }
  if(dropDown.value === "beehive"){
    InsertPreset( active, beehive)
  }
  if(dropDown.value === "loaf"){
    InsertPreset(active, loaf)
  }
  if(dropDown.value === "boat"){
    InsertPreset(active, boat)
  }
  if(dropDown.value === "tub"){
    InsertPreset(active, tub)
  }
  if(dropDown.value === "toad"){
    InsertPreset(active, toad)
  }
  if(dropDown.value === "beacon"){
    InsertPreset(active, beacon)
  }
  if(dropDown.value === "pulsar"){
    InsertPreset(active, pulsar)
  }
  if(dropDown.value === "penta"){
    InsertPreset(active, penta)
  }
  if(dropDown.value === "glider"){
    InsertPreset(active, glider)
  }
  if(dropDown.value === "lwship"){
    InsertPreset(active, lwship)
  }
  if(dropDown.value === "midship"){
    InsertPreset(active, mwship)
  }
  if(dropDown.value === "hvyship"){
    InsertPreset(active, hwship)
  }
})

let frame = 0;
let framLimit = 10;

function draw() {
  ctx.clearRect(0, 0, viewWidth, viewHeight);
  determinStatus(active);
  updateMatrix(active);
  runtimeHandler();
}

function animate() {
  frame++;
  if (frame % framLimit === 0) {
    frame = 0;
    draw();
  }
  requestAnimationFrame(animate);
}

animate();
